-- ER Diagram --

Course
----------
course_id (Primary Key)
department
course_number
course_name
semester
year

Student
----------
student_id (Primary Key)
first_name
last_name
course_id (Foreign Key)

Assignment
----------
assignment_id (Primary Key)
category
percentage
course_id (Foreign Key)

Grades
----------
grade_id (Primary Key)
assignment_id (Foreign Key)
student_id (Foreign Key)
score

-- Creating Tables --

-- Create Course table
CREATE TABLE Course (
  course_id INT PRIMARY KEY,
  department VARCHAR(300),
  course_number INT,
  course_name VARCHAR(300),
  semester VARCHAR(300),
  year INT
);

-- Create Student table
CREATE TABLE Student (
  student_id INT PRIMARY KEY,
  first_name VARCHAR(300),
  last_name VARCHAR(300),
  course_id INT,
  FOREIGN KEY (course_id) REFERENCES Course(course_id)
);

-- Create Assignment table
CREATE TABLE Assignment (
  assignment_id INT PRIMARY KEY,
  category VARCHAR(300),
  percentage DECIMAL(5,2),
  course_id INT,
  FOREIGN KEY (course_id) REFERENCES Course(course_id)
);

-- Create Grades table
CREATE TABLE Grades (
  grade_id INT PRIMARY KEY,
  assignment_id INT,
  student_id INT,
  score DECIMAL(5,2),
  FOREIGN KEY (assignment_id) REFERENCES Assignment(assignment_id),
  FOREIGN KEY (student_id) REFERENCES Student(student_id)
);

-- Inserting Values --

-- Insert values into Course table --
INSERT INTO Course (course_id, department, course_number, course_name, semester, year)
VALUES (1, 'Computer Science', 101, 'Database Systems', 'Spring', 2023),
       (2, 'Math', 201, 'Linear Algebra', 'Spring', 2023);
       
       
       
-- Insert values into Student table --
INSERT INTO Student (student_id, first_name, last_name, course_id)
VALUES (1, 'Meredith', 'Grey', 1),
       (2, 'Derek', 'Shepherd', 1),
       (3, 'Joe', 'Q', 2),
       (4, 'Miranda', 'Bailey', 2);
       
       
       
-- Insert values into Assignment table --
INSERT INTO Assignment (assignment_id, category, percentage, course_id)
VALUES (1, 'Participation', 10.0, 1),
       (2, 'Homework', 20.0, 1),
       (3, 'Tests', 50.0, 1),
       (4, 'Projects', 20.0, 1),
       (5, 'Final Exam', 100.0, 2);
       
       
-- Insert values into Grades table --
INSERT INTO Grades (grade_id, assignment_id, student_id, score)
VALUES (1.1, 1, 1, 5.0),
       (2.1, 2, 1, 90.0),
       (3.1, 3, 1, 76.0),
       (4.1, 4, 1, 89.0),
       (1.2, 1, 2, 10.0),
       (2.2, 2, 2, 96.5),
       (3.2, 3, 2, 89.0),
       (4.2, 4, 2, 99.0),
       (5.3, 5, 3, 65.0),
       (5.4, 5, 4, 98.0);
       
       
  
-- Show Output of Tables --

SELECT * FROM Course;
SELECT * FROM Student;
SELECT * FROM Assignment;
SELECT * FROM Grades;
       

-- Showing all students in a course (course_id = 1, 2, 3, etc.) --

SELECT s.* FROM Student s
JOIN Course c ON s.course_id = c.course_id
WHERE c.course_id = 1;

-- List all of the students in a course and all of their scores on every assignment --

SELECT s.* FROM Student s
JOIN Course c ON s.course_id = c.course_id
WHERE c.course_id = 1;

SELECT score FROM Grades
WHERE student_id = 1 OR student_id = 2;


-- Showing the average/highest/lowest scores of an assignment --

-- Average score
SELECT AVG(score) AS average_score
FROM Grades
WHERE assignment_id = 2;

-- Highest score
SELECT MAX(score) AS highest_score
FROM Grades
WHERE assignment_id = 2;

-- Lowest score
SELECT MIN(score) AS lowest_score
FROM Grades
WHERE assignment_id = 2;


-- Add a new assignment --

INSERT INTO Assignment (assignment_id, category, percentage, course_id)
VALUES (6, 'Final Test', 30.0, 1);


-- Change the percentage of categories for a test --

UPDATE Assignment
SET percentage = 0.0
WHERE category = 'Final Test' AND course_id = 1;


-- Add 2 points to the score of each student on an assignment --

UPDATE Grades
SET score = score + 5
WHERE assignment_id = 3;

-- Add 2 points just to those students whose last name contains a ‘Q’ --

UPDATE Grades
SET score = score + 2
WHERE student_id IN (
  SELECT student_id
  FROM Student
  WHERE last_name LIKE '%Q%'
  );


-- Compute the grade for a student --

SELECT s.first_name, s.last_name, SUM(a.percentage * g.score / 100) AS grade
FROM Student s
JOIN Grades g ON s.student_id = g.student_id
JOIN Assignment a ON g.assignment_id = a.assignment_id
GROUP BY s.first_name, s.last_name
HAVING s.student_id = 1;

-- Compute the grade for a student, where the lowest score for a given category is dropped --

SELECT s.first_name, s.last_name, SUM(a.percentage * (g.score - min_score.min_score) / 100) AS grade
FROM Student s
JOIN Grades g ON s.student_id = g.student_id
JOIN Assignment a ON g.assignment_id = a.assignment_id
JOIN (SELECT student_id, MIN(score) AS min_score FROM Grades GROUP BY student_id) AS min_score ON s.student_id = min_score.student_id
WHERE s.student_id = 2
GROUP BY s.first_name, s.last_name;


